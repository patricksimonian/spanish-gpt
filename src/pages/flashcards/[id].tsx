import React, { useEffect, useMemo, useState } from 'react';
import Head from "next/head";
import { useRouter } from "next/router";
import FlashcardGrid from "../../components/FlashcardGrid";
import Link from "next/link";
import { type languageFile } from "../api/languages";
import { shuffle } from "~/utils/array";


enum OrderType {
  SHUFFLED = 'SHUFFLED',
  ORDERED = 'ORDERED',
  ORDERED_REVERSE = 'ORDERED_REVERSE'
}

function Flashcard() {
  const [flashcardData, setFlashcardData] = useState<languageFile>();
  const [ fetched, setFetched] = useState(false)
  const [ orderType, setOrderType ] = useState(OrderType.ORDERED)

  const router = useRouter()
  const { id } = router.query
  useEffect(() => {
    const getAndSetFlashCardData = async () => {
      if(id) {
        const res = await fetch(`/api/languages/${id as string}`)
        if(res.status === 200) {
            const d: {data: languageFile} =  await res.json() as {data: languageFile}
            setFlashcardData(d.data)
        }
      }
    }
    if(!fetched) {

        getAndSetFlashCardData().catch(() => null)
        setFetched(true)
    }
  }, [fetched, flashcardData, id])

  const cards = useMemo(() => {
    if(flashcardData !== undefined) {
        const cards = flashcardData.spec.data.map(d => ({...d}));
        switch(orderType) {
          case OrderType.ORDERED:
            return cards
          case OrderType.ORDERED_REVERSE:
            return cards.reverse()
          case OrderType.SHUFFLED:
            return shuffle(cards) as {english: string, spanish: string}[]
        }
    } else {
      return []
    }
  }, [orderType, flashcardData])

  if(flashcardData !== undefined) {
      return (
        <>
          <Head>
            <title>{flashcardData.name}</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="flex min-h-screen pt-5 flex-col items-center justify-center bg-gradient-to-b from-[#003333] to-[#15162c]">
            <h1 className="text-5xl center text-white mb-10">{flashcardData.name}</h1>
            <div className="flex items-center  flex-wrap ">
              <div className='flex justify-center sm:justify-start mx-auto mb-5'>
                <Link className="text-lg sm:text-2xl text-white rounded-lg cursor-pointer border-2 py-2 px-4" href="/">Back</Link>
                <Link className="text-lg sm:text-2xl text-blue-500 rounded-lg cursor-pointer py-2 px-4" href={`/game_mode/${id as string}`}>Game Mode</Link>
              </div>
              <div className='flex flex-wrap justify-center sm:justify-start mx-auto mb-5'>
              
                {
                  Object.keys(OrderType).map(ot => {
                  
                    return <button onClick={() => setOrderType(ot as OrderType)} key={ot} className={`text-lg sm:text-2xl border-2  m-1 sm:mx-3 rounded-md sm:py-2 sm:px-4 px-2 py-1 ${ot === orderType ? 'text-yellow-500': 'text-blue-300'}`}>{ot}</button>
                  })
                }
              </div>
            </div>
            <FlashcardGrid cards={cards} />
          </main>
        </>
      );
  } else {
    return (
      <>
        <div className="text-5xl text-white text-center">Loading</div>
      </>
    )
  }
}


export default Flashcard;
